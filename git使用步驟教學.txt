git init                         // 這是讓 git 初始化，生成 .git/ 資料夾
git add file_name                // 追蹤特定檔案
git add *                        // 資料夾中全文件追蹤 
git rm -f --cached gym           // 刪除gym追蹤 
git status                       // 查看文件狀態
git commit                       // 如果沒有加參數則會跳到文字編輯器的畫面請你加入文字說明
git commit -m "修改的文字說明"   // -m 是要將文字說明也一併紀錄
git commit -m "first commit"     // (第一次 commit)

git clone <url>                  // 複製既有的遠端數據庫  



/* 
 * 到了後來會進行多個檔案的修改，這時候 commit 可能會出現錯誤的訊息
 * 原因是因為你要將所有修改過的檔案都提交，所以要嘛就是針對單一檔案提交
 * 不然就是加上參數，讓所有被修改過得檔案一口氣提交
 */

===========================================================================================

基本流程
基本上做版本控制幾乎只有兩件事情要做

    add
    commit

這兩件事就是不斷的讓 Git 幫你對檔案做追蹤

===========================================================================================

回復檔案
說到回復檔案必須先對 Git 中的 HEAD 做個說明， 
HEAD 在 Git 中代表最近一次的 commit 因此 Git 利用一些表示方法來代表前幾次的 commit

回復的指令為 git reset ，
    而 reset 有分軟性的回覆跟硬性的

軟性: 不會把新增或刪除的文字給刪除，單純殺掉 commit 而已
    （通常 commit 文字訊息打錯，可以用軟性回復，再重新提交一次)

硬性: 除了將 commit 給殺掉之外，也會將文字變回原樣，這要看是回復到哪一次的 commit 而定
 

使用方法: git reset 提交的版本
軟性:
    git reset HEAD^                            // 將 commit 切到上一次提交的狀態
                                               // 但刪修過得文字不會移除，不加上參數預設為軟性
    git --soft reset HEAD~2                    // 同樣是軟性，這次是切換到上上次提交的狀態

硬性:
    git --hard reset HEAD                      // 可以將文字變回最近這次 commit
    git --hard reset HEAD^                     // 將這次的 commit 殺掉
                                               // 切回上一次的 commit 之外 
                                               // 會將文字變成上一次 commit 的樣子

===============================================================================================

使用 GitHub

Git 除了可以單機做版本控制，也能找個代管伺服器來做版本控制，而 GitHub 則是目前最夯的代管商， 
目前只要程式碼是 Open 給大家的，都可以免費使用 GitHub

GitHub

首先註冊完 GitHub 的帳號之後，點 New Repository ，這時候會要求你輸入一個名稱，
可以使用自己的專案名稱，接著到了下一頁之後，會有告訴你將專案上傳到 GitHub 的方法













